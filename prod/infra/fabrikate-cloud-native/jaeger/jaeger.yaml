---
apiVersion: v1
data:
  elasticsearch.yml: |-
    cluster.name: tracing

    node.data: ${NODE_DATA:true}
    node.master: ${NODE_MASTER:true}
    node.ingest: ${NODE_INGEST:true}
    node.name: ${HOSTNAME}

    network.host: 0.0.0.0

    cloud:
      kubernetes:
        service: ${SERVICE}
        namespace: ${KUBERNETES_NAMESPACE}
    # see https://github.com/kubernetes/kubernetes/issues/3595
    bootstrap.memory_lock: ${BOOTSTRAP_MEMORY_LOCK:false}

    discovery:
      zen:
        hosts_provider: kubernetes
        minimum_master_nodes: ${MINIMUM_MASTER_NODES:2}

    # see https://www.elastic.co/guide/en/x-pack/current/xpack-settings.html
    xpack.ml.enabled: ${XPACK_ML_ENABLED:false}
    xpack.monitoring.enabled: ${XPACK_MONITORING_ENABLED:false}
    xpack.security.enabled: ${XPACK_SECURITY_ENABLED:false}
    xpack.watcher.enabled: ${XPACK_WATCHER_ENABLED:false}

    # see https://github.com/elastic/elasticsearch-definitive-guide/pull/679
    processors: ${PROCESSORS:}

    # avoid split-brain w/ a minimum consensus of two masters plus a data node
    gateway.expected_master_nodes: ${EXPECTED_MASTER_NODES:2}
    gateway.expected_data_nodes: ${EXPECTED_DATA_NODES:1}
    gateway.recover_after_time: ${RECOVER_AFTER_TIME:5m}
    gateway.recover_after_master_nodes: ${RECOVER_AFTER_MASTER_NODES:2}
    gateway.recover_after_data_nodes: ${RECOVER_AFTER_DATA_NODES:1}
  log4j2.properties: |-
    status = error
    appender.console.type = Console
    appender.console.name = console
    appender.console.layout.type = PatternLayout
    appender.console.layout.pattern = [%d{ISO8601}][%-5p][%-25c{1.}] %marker%m%n
    rootLogger.level = info
    rootLogger.appenderRef.console.ref = console
    logger.searchguard.name = com.floragunn
    logger.searchguard.level = info
  pre-stop-hook.sh: |-
    #!/bin/bash
    set -e

    SERVICE_ACCOUNT_PATH=/var/run/secrets/kubernetes.io/serviceaccount
    KUBE_TOKEN=$(<${SERVICE_ACCOUNT_PATH}/token)
    KUBE_NAMESPACE=$(<${SERVICE_ACCOUNT_PATH}/namespace)

    STATEFULSET_NAME=$(echo "${HOSTNAME}" | sed 's/-[0-9]*$//g')
    INSTANCE_ID=$(echo "${HOSTNAME}" | grep -o '[0-9]*$')

    echo "Prepare stopping of Pet ${KUBE_NAMESPACE}/${HOSTNAME} of StatefulSet ${KUBE_NAMESPACE}/${STATEFULSET_NAME} instance_id ${INSTANCE_ID}"

    INSTANCES_DESIRED=$(curl -s \
      --cacert ${SERVICE_ACCOUNT_PATH}/ca.crt \
      -H "Authorization: Bearer $KUBE_TOKEN" \
      "https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_PORT_443_TCP_PORT}/apis/apps/v1beta1/namespaces/${KUBE_NAMESPACE}/statefulsets/${STATEFULSET_NAME}/status" | jq -r '.spec.replicas')

    echo "Desired instance count is ${INSTANCES_DESIRED}"

    if [ "${INSTANCE_ID}" -lt "${INSTANCES_DESIRED}" ]; then
      echo "No data migration needed"
      exit 0
    fi

    echo "Prepare to migrate data of the node"

    NODE_STATS=$(curl -s -XGET 'http://localhost:9200/_nodes/stats')
    NODE_IP=$(echo "${NODE_STATS}" | jq -r ".nodes[] | select(.name==\"${HOSTNAME}\") | .host")

    echo "Move all data from node ${NODE_IP}"

    curl -s -XPUT localhost:9200/_cluster/settings -d "{
      \"transient\" :{
          \"cluster.routing.allocation.exclude._ip\" : \"${NODE_IP}\"
      }
    }"
    echo

    echo "Wait for node to become empty"
    DOC_COUNT=$(echo "${NODE_STATS}" | jq ".nodes[] | select(.name==\"${HOSTNAME}\") | .indices.docs.count")
    while [ "${DOC_COUNT}" -gt 0 ]; do
      NODE_STATS=$(curl -s -XGET 'http://localhost:9200/_nodes/stats')
      DOC_COUNT=$(echo "${NODE_STATS}" | jq -r ".nodes[] | select(.name==\"${HOSTNAME}\") | .indices.docs.count")
      echo "Node contains ${DOC_COUNT} documents"
      sleep 1
    done

    echo "Wait for node shards to become empty"
    SHARD_STATS=$(curl -s -XGET 'http://localhost:9200/_cat/shards?format=json')
    SHARD_COUNT=$(echo "${SHARD_STATS}" | jq "[.[] | select(.node==\"${HOSTNAME}\")] | length")
    while [ "${SHARD_COUNT}" -gt 0 ]; do
      SHARD_STATS=$(curl -s -XGET 'http://localhost:9200/_cat/shards?format=json')
      SHARD_COUNT=$(echo "${SHARD_STATS}" | jq "[.[] | select(.node==\"${HOSTNAME}\")] | length")
      echo "Node contains ${SHARD_COUNT} shards"
      sleep 1
    done

    echo "Node clear to shutdown"
kind: ConfigMap
metadata:
  labels:
    app: jaeger-elasticsearch
    chart: elasticsearch-0.5.0
    heritage: Tiller
    release: jaeger
  name: jaeger-elasticsearch
  namespace: jaeger

---
apiVersion: v1
data:
  cassandra.contact-points: cassandra:9042
  cassandra.datacenter.name: dc1
  cassandra.keyspace: jaeger_v1_dc1
  cassandra.port: "9042"
  cassandra.schema.mode: prod
  cassandra.servers: cassandra
  collector.host-port: jaeger-collector:14267
  collector.http-port: "14268"
  collector.port: "14267"
  collector.zipkin.http-port: "9411"
  es.nodes-wan-only: "false"
  es.password: changeme
  es.server-urls: http://jaeger-elasticsearch-client:9200
  es.username: elastic
  hotrod.agent-host: jaeger-agent
  hotrod.agent-port: "6831"
  query.base-path: /
  query.health-check-http-port: "16687"
  query.port: "16686"
  span-storage.type: elasticsearch
kind: ConfigMap
metadata:
  labels:
    app: jaeger
    chart: jaeger-0.8.2
    heritage: Tiller
    jaeger-infra: common-configmap
    release: jaeger
  name: jaeger
  namespace: jaeger

---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: elasticsearch
    chart: elasticsearch-0.5.0
    heritage: Tiller
    release: jaeger
  name: jaeger-elasticsearch
  namespace: jaeger

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    app: elasticsearch
    chart: elasticsearch-0.5.0
    heritage: Tiller
    release: jaeger
  name: jaeger-elasticsearch
  namespace: jaeger
rules:
- nonResourceURLs:
  - /
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - get
- apiGroups:
  - apps
  resources:
  - statefulsets/status
  verbs:
  - get

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    app: elasticsearch
    chart: elasticsearch-0.5.0
    heritage: Tiller
    release: jaeger
  name: jaeger-elasticsearch
  namespace: jaeger
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: jaeger-elasticsearch
subjects:
- kind: ServiceAccount
  name: jaeger-elasticsearch
  namespace: jaeger

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: elasticsearch
    chart: elasticsearch-0.5.0
    component: client
    heritage: Tiller
    release: jaeger
  name: jaeger-elasticsearch-client
  namespace: jaeger
spec:
  ports:
  - name: http
    port: 9200
    targetPort: http
  - name: transport
    port: 9300
    targetPort: transport
  selector:
    app: elasticsearch
    component: client
    release: jaeger
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: elasticsearch
    chart: elasticsearch-0.5.0
    component: master
    heritage: Tiller
    release: jaeger
  name: jaeger-elasticsearch-master
  namespace: jaeger
spec:
  clusterIP: None
  ports:
  - port: 9300
    targetPort: transport
  selector:
    app: elasticsearch
    component: master
    release: jaeger

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: jaeger
    chart: jaeger-0.8.2
    component: agent
    heritage: Tiller
    jaeger-infra: agent-service
    release: jaeger
  name: jaeger-agent
  namespace: jaeger
spec:
  ports:
  - name: agent-zipkin-thrift
    port: 5775
    protocol: UDP
    targetPort: 5775
  - name: agent-compact
    port: 6831
    protocol: UDP
    targetPort: 6831
  - name: agent-binary
    port: 6832
    protocol: UDP
    targetPort: 6832
  - name: agent-sampling
    port: 5778
    protocol: TCP
    targetPort: 5778
  selector:
    app: jaeger
    component: agent
    jaeger-infra: agent-instance
    release: jaeger
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: jaeger
    chart: jaeger-0.8.2
    component: collector
    heritage: Tiller
    jaeger-infra: collector-service
    release: jaeger
  name: jaeger-collector
  namespace: jaeger
spec:
  ports:
  - name: jaeger-collector-tchannel
    port: 14267
    protocol: TCP
    targetPort: tchannel
  - name: jaeger-collector-http
    port: 14268
    protocol: TCP
    targetPort: http
  - name: jaeger-collector-zipkin
    port: 9411
    protocol: TCP
    targetPort: zipkin
  selector:
    app: jaeger
    component: collector
    jaeger-infra: collector-pod
    release: jaeger
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: jaeger
    chart: jaeger-0.8.2
    component: query
    heritage: Tiller
    jaeger-infra: query-service
    release: jaeger
  name: jaeger-query
  namespace: jaeger
spec:
  ports:
  - name: jaeger-query
    port: 80
    protocol: TCP
    targetPort: 16686
  selector:
    app: jaeger
    component: query
    jaeger-infra: query-pod
    release: jaeger
  type: ClusterIP

---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  labels:
    app: jaeger
    chart: jaeger-0.8.2
    component: agent
    heritage: Tiller
    jaeger-infra: agent-daemonset
    release: jaeger
  name: jaeger-agent
  namespace: jaeger
spec:
  template:
    metadata:
      labels:
        app: jaeger
        component: agent
        jaeger-infra: agent-instance
        release: jaeger
    spec:
      containers:
      - env:
        - name: COLLECTOR_HOST_PORT
          valueFrom:
            configMapKeyRef:
              key: collector.host-port
              name: jaeger
        image: jaegertracing/jaeger-agent:1.8.2
        imagePullPolicy: IfNotPresent
        name: jaeger-agent
        ports:
        - containerPort: 5775
          protocol: UDP
        - containerPort: 6831
          protocol: UDP
        - containerPort: 6832
          protocol: UDP
        - containerPort: 5778
          protocol: TCP
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 256m
            memory: 128Mi
      dnsPolicy: ClusterFirst
      nodeSelector: {}

---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  labels:
    app: elasticsearch
    chart: elasticsearch-0.5.0
    component: client
    heritage: Tiller
    release: jaeger
  name: jaeger-elasticsearch-client
  namespace: jaeger
spec:
  replicas: 2
  template:
    metadata:
      labels:
        app: elasticsearch
        component: client
        release: jaeger
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: elasticsearch
                  component: client
                  release: jaeger
              topologyKey: kubernetes.io/hostname
            weight: 1
      containers:
      - env:
        - name: SERVICE
          value: jaeger-elasticsearch-master
        - name: KUBERNETES_MASTER
          value: kubernetes.default.svc.cluster.local
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NODE_DATA
          value: "false"
        - name: NODE_INGEST
          value: "false"
        - name: NODE_MASTER
          value: "false"
        - name: PROCESSORS
          valueFrom:
            resourceFieldRef:
              resource: limits.cpu
        - name: ES_JAVA_OPTS
          value: -Djava.net.preferIPv4Stack=true -Xms512m -Xmx512m
        - name: MINIMUM_MASTER_NODES
          value: "2"
        image: centerforopenscience/elasticsearch:5.4
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /_cluster/health?wait_for_status=yellow
            port: 9200
          initialDelaySeconds: 90
        name: elasticsearch
        ports:
        - containerPort: 9200
          name: http
        - containerPort: 9300
          name: transport
        readinessProbe:
          httpGet:
            path: /_cluster/health?wait_for_status=yellow
            port: 9200
          initialDelaySeconds: 5
        resources:
          limits:
            cpu: "1"
          requests:
            cpu: 25m
            memory: 512Mi
        volumeMounts:
        - mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
          name: config
          subPath: elasticsearch.yml
        - mountPath: /usr/share/elasticsearch/config/log4j2.properties
          name: config
          subPath: log4j2.properties
      initContainers:
      - command:
        - sysctl
        - -w
        - vm.max_map_count=262144
        image: busybox
        imagePullPolicy: Always
        name: sysctl
        securityContext:
          privileged: true
      serviceAccountName: jaeger-elasticsearch
      volumes:
      - configMap:
          name: jaeger-elasticsearch
        name: config

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: jaeger
    chart: jaeger-0.8.2
    component: collector
    heritage: Tiller
    jaeger-infra: collector-deployment
    release: jaeger
  name: jaeger-collector
  namespace: jaeger
spec:
  replicas: 3
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: jaeger
        component: collector
        jaeger-infra: collector-pod
        release: jaeger
    spec:
      containers:
      - env:
        - name: SPAN_STORAGE_TYPE
          valueFrom:
            configMapKeyRef:
              key: span-storage.type
              name: jaeger
        - name: ES_PASSWORD
          valueFrom:
            configMapKeyRef:
              key: es.password
              name: jaeger
        - name: ES_SERVER_URLS
          valueFrom:
            configMapKeyRef:
              key: es.server-urls
              name: jaeger
        - name: ES_USERNAME
          valueFrom:
            configMapKeyRef:
              key: es.username
              name: jaeger
        - name: COLLECTOR_PORT
          valueFrom:
            configMapKeyRef:
              key: collector.port
              name: jaeger
        - name: COLLECTOR_HTTP_PORT
          valueFrom:
            configMapKeyRef:
              key: collector.http-port
              name: jaeger
        - name: COLLECTOR_ZIPKIN_HTTP_PORT
          valueFrom:
            configMapKeyRef:
              key: collector.zipkin.http-port
              name: jaeger
        image: jaegertracing/jaeger-collector:1.8.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            port: healthcheck
          initialDelaySeconds: 10
        name: jaeger-collector
        ports:
        - containerPort: 14267
          name: tchannel
          protocol: TCP
        - containerPort: 14268
          name: http
          protocol: TCP
        - containerPort: 14269
          name: healthcheck
          protocol: TCP
        - containerPort: 9411
          name: zipkin
          protocol: TCP
        readinessProbe:
          httpGet:
            port: healthcheck
          initialDelaySeconds: 10
        resources:
          limits:
            cpu: 1
            memory: 1Gi
          requests:
            cpu: 500m
            memory: 512Mi
      dnsPolicy: ClusterFirst
      nodeSelector: {}
      restartPolicy: Always

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: jaeger
    chart: jaeger-0.8.2
    component: query
    heritage: Tiller
    jaeger-infra: query-deployment
    release: jaeger
  name: jaeger-query
  namespace: jaeger
spec:
  replicas: 2
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: jaeger
        component: query
        jaeger-infra: query-pod
        release: jaeger
    spec:
      containers:
      - env:
        - name: SPAN_STORAGE_TYPE
          valueFrom:
            configMapKeyRef:
              key: span-storage.type
              name: jaeger
        - name: ES_PASSWORD
          valueFrom:
            configMapKeyRef:
              key: es.password
              name: jaeger
        - name: ES_SERVER_URLS
          valueFrom:
            configMapKeyRef:
              key: es.server-urls
              name: jaeger
        - name: ES_USERNAME
          valueFrom:
            configMapKeyRef:
              key: es.username
              name: jaeger
        - name: QUERY_PORT
          valueFrom:
            configMapKeyRef:
              key: query.port
              name: jaeger
        - name: QUERY_HEALTH_CHECK_HTTP_PORT
          valueFrom:
            configMapKeyRef:
              key: query.health-check-http-port
              name: jaeger
        - name: QUERY_BASE_PATH
          valueFrom:
            configMapKeyRef:
              key: query.base-path
              name: jaeger
        image: jaegertracing/jaeger-query:1.8.2
        imagePullPolicy: IfNotPresent
        name: jaeger-query
        ports:
        - containerPort: 16686
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /
            port: 16687
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 256m
            memory: 128Mi
      dnsPolicy: ClusterFirst
      nodeSelector: {}
      restartPolicy: Always

---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  labels:
    app: elasticsearch
    chart: elasticsearch-0.5.0
    component: data
    heritage: Tiller
    release: jaeger
  name: jaeger-elasticsearch-data
  namespace: jaeger
spec:
  replicas: 2
  serviceName: jaeger-elasticsearch-data
  template:
    metadata:
      labels:
        app: elasticsearch
        component: data
        release: jaeger
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: elasticsearch
                  component: data
                  release: jaeger
              topologyKey: kubernetes.io/hostname
            weight: 1
      containers:
      - env:
        - name: SERVICE
          value: jaeger-elasticsearch-master
        - name: KUBERNETES_MASTER
          value: kubernetes.default.svc.cluster.local
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NODE_MASTER
          value: "false"
        - name: PROCESSORS
          valueFrom:
            resourceFieldRef:
              resource: limits.cpu
        - name: ES_JAVA_OPTS
          value: -Djava.net.preferIPv4Stack=true -Xms1536m -Xmx1536m
        - name: MINIMUM_MASTER_NODES
          value: "2"
        image: centerforopenscience/elasticsearch:5.4
        imagePullPolicy: IfNotPresent
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/bash
              - /pre-stop-hook.sh
        name: elasticsearch
        ports:
        - containerPort: 9300
          name: transport
        readinessProbe:
          httpGet:
            path: /_cluster/health?local=true
            port: 9200
          initialDelaySeconds: 5
        resources:
          limits:
            cpu: "1"
          requests:
            cpu: 25m
            memory: 1536Mi
        volumeMounts:
        - mountPath: /usr/share/elasticsearch/data
          name: data
        - mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
          name: config
          subPath: elasticsearch.yml
        - mountPath: /usr/share/elasticsearch/config/log4j2.properties
          name: config
          subPath: log4j2.properties
        - mountPath: /pre-stop-hook.sh
          name: config
          subPath: pre-stop-hook.sh
      initContainers:
      - command:
        - sysctl
        - -w
        - vm.max_map_count=262144
        image: busybox
        imagePullPolicy: Always
        name: sysctl
        securityContext:
          privileged: true
      - command:
        - /bin/bash
        - -c
        - chown -R elasticsearch:elasticsearch /usr/share/elasticsearch/data && chown
          -R elasticsearch:elasticsearch /usr/share/elasticsearch/logs
        image: centerforopenscience/elasticsearch:5.4
        imagePullPolicy: IfNotPresent
        name: chown
        securityContext:
          runAsUser: 0
        volumeMounts:
        - mountPath: /usr/share/elasticsearch/data
          name: data
      serviceAccountName: jaeger-elasticsearch
      terminationGracePeriodSeconds: 3600
      volumes:
      - configMap:
          name: jaeger-elasticsearch
        name: config
      - emptyDir: {}
        name: data

---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  labels:
    app: elasticsearch
    chart: elasticsearch-0.5.0
    component: master
    heritage: Tiller
    release: jaeger
  name: jaeger-elasticsearch-master
  namespace: jaeger
spec:
  replicas: 3
  serviceName: jaeger-elasticsearch-master
  template:
    metadata:
      labels:
        app: elasticsearch
        component: master
        release: jaeger
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: elasticsearch
                  component: master
                  release: jaeger
              topologyKey: kubernetes.io/hostname
            weight: 1
      containers:
      - env:
        - name: SERVICE
          value: jaeger-elasticsearch-master
        - name: KUBERNETES_MASTER
          value: kubernetes.default.svc.cluster.local
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NODE_DATA
          value: "false"
        - name: NODE_INGEST
          value: "false"
        - name: PROCESSORS
          valueFrom:
            resourceFieldRef:
              resource: limits.cpu
        - name: ES_JAVA_OPTS
          value: -Djava.net.preferIPv4Stack=true -Xms512m -Xmx512m
        - name: MINIMUM_MASTER_NODES
          value: "2"
        image: centerforopenscience/elasticsearch:5.4
        imagePullPolicy: IfNotPresent
        name: elasticsearch
        ports:
        - containerPort: 9300
          name: transport
        readinessProbe:
          httpGet:
            path: /_cluster/health?local=true
            port: 9200
          initialDelaySeconds: 5
        resources:
          limits:
            cpu: "1"
          requests:
            cpu: 25m
            memory: 512Mi
        volumeMounts:
        - mountPath: /usr/share/elasticsearch/data
          name: data
        - mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
          name: config
          subPath: elasticsearch.yml
        - mountPath: /usr/share/elasticsearch/config/log4j2.properties
          name: config
          subPath: log4j2.properties
      initContainers:
      - command:
        - sysctl
        - -w
        - vm.max_map_count=262144
        image: busybox
        imagePullPolicy: Always
        name: sysctl
        securityContext:
          privileged: true
      - command:
        - /bin/bash
        - -c
        - chown -R elasticsearch:elasticsearch /usr/share/elasticsearch/data && chown
          -R elasticsearch:elasticsearch /usr/share/elasticsearch/logs
        image: centerforopenscience/elasticsearch:5.4
        imagePullPolicy: IfNotPresent
        name: chown
        securityContext:
          runAsUser: 0
        volumeMounts:
        - mountPath: /usr/share/elasticsearch/data
          name: data
      serviceAccountName: jaeger-elasticsearch
      volumes:
      - configMap:
          name: jaeger-elasticsearch
        name: config
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 4Gi

